{"version":3,"sources":["index.js","index.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","_typeof","decorate","i","defineProperty","__metadata","k","v","metadata","development_core_1","require","cache","sourcemaps","uglify","babel","plumber","htmlMin","ngHtml2Js","ngAnnotate","TemplTasks","_classCallCheck","this","_createClass","value","name","oper","Operation","default","pipes","empty","spare","quotes","config","template","option","deploy","release","toTransform","init","babelOption","presets","sourceMap","gulpWarnings","write","sourceMaps","build","watchTasks","dynamicTask","exports"],"mappings":"AAAA,+kBACIA,WAA0C,SAAUC,EAAYC,EAAQC,EAAKC,GAC7E,GAA2HC,GAAvHC,EAAIC,UAAUC,OAAQC,EAAIH,EAAI,EAAIJ,EAAkB,OAATE,EAAgBA,EAAOM,OAAOC,yBAAyBT,EAAQC,GAAOC,CACrH,IAAuB,YAAnB,mBAAOQ,SAAP,YAAAC,QAAOD,WAAoD,kBAArBA,SAAQE,SAAyBL,EAAIG,QAAQE,SAASb,EAAYC,EAAQC,EAAKC,OACpH,KAAK,GAAIW,GAAId,EAAWO,OAAS,EAAGO,GAAK,EAAGA,KAASV,EAAIJ,EAAWc,MAAIN,GAAKH,EAAI,EAAID,EAAEI,GAAKH,EAAI,EAAID,EAAEH,EAAQC,EAAKM,GAAKJ,EAAEH,EAAQC,KAASM,EAChJ,OAAOH,GAAI,GAAKG,GAAKC,OAAOM,eAAed,EAAQC,EAAKM,GAAIA,GAE5DQ,WAA0C,SAAUC,EAAGC,GANvDnB,GAAc,YAAdA,mBAAAA,SAAAA,YAAAA,QAAAA,WAAoDC,kBAAzBD,SAAeoB,SAAsBlB,MAAQC,SAA9BiB,SAAyCF,EAAAC,ICDvFE,mBAAAC,QAAiF,oBAG3EC,MAAQD,QAAQ,eAChBE,WAAaF,QAAQ,mBACrBG,OAASH,QAAQ,eACjBI,MAAQJ,QAAQ,cAChBK,QAAUL,QAAQ,gBAClBM,QAAUN,QAAQ,oBAClBO,UAAYP,QAAQ,mBACpBQ,WAAaR,QAAQ,oBAoC3BS,WAAAA,WAAA,QAAAA,KAAAC,gBAAAC,KAAAF,GAAA,MAAAG,cAAAH,IAAA5B,IAAA,QAAAgC,MAAA,WAGQ,QAEQC,KAAM,QACNC,KAAMhB,mBAAAiB,UAAUC,QAChBC,OACI,WAAA,MAAMjB,OAAM,UACZ,WAAA,MAAMI,YACN,WAAA,MAAMC,UACFa,OAAO,EACPC,OAAO,EACPC,QAAQ,KAEZ,SAACC,GAAD,MAAYf,YACRgB,SAA6BD,EAAOE,OAAQD,UAAf,kPAU7BR,KAAMhB,mBAAAiB,UAAUS,OAAS1B,mBAAAiB,UAAUU,QACnCC,YAAa,WAAA,MAAMzB,YAAW0B,UAG9Bb,KAAMhB,mBAAAiB,UAAUS,OAAS1B,mBAAAiB,UAAUU,QACnCC,YAAa,SAACL,GAAD,MAAYlB,OAAyBkB,EAAOE,OAAQK,cAAiBC,SAAU,eAG5Ff,KAAMhB,mBAAAiB,UAAUS,OAAS1B,mBAAAiB,UAAUU,QACnCC,YAAa,SAACL,GAAD,MAAYd,YAA8Bc,EAAOE,OAAQhB,aAAgBuB,WAAW,EAAMC,cAAc,OAGrHjB,KAAMhB,mBAAAiB,UAAUS,OAAS1B,mBAAAiB,UAAUU,QACnCC,YAAa,WAAA,MAAMxB,aAGnBY,KAAMhB,mBAAAiB,UAAUS,OAAS1B,mBAAAiB,UAAUU,QACnCC,YAAa,SAACL,GAAD,MAAYpB,YAAW+B,MAAyBX,EAAOE,OAAQU,YAAe,qBAKnGpB,KAAM,aACNC,KAAMhB,mBAAAiB,UAAUmB,MAChBC,YAAa,eAlD7B3B,IADAA,YAAA/B,YAACqB,mBAAAsC,YA2CuBtB,WAAAA,yBACAY,YA3CXW,QAAA7B,WAAUA","file":"../index.js","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst development_core_1 = require('development-core');\nconst cache = require('gulp-cached');\nconst sourcemaps = require('gulp-sourcemaps');\nconst uglify = require('gulp-uglify');\nconst babel = require('gulp-babel');\nconst plumber = require('gulp-plumber');\nconst htmlMin = require('gulp-minify-html');\nconst ngHtml2Js = require('gulp-ng-html2js');\nconst ngAnnotate = require('gulp-ng-annotate');\nlet TemplTasks = class TemplTasks {\n    tasks() {\n        return [\n            {\n                name: 'templ',\n                oper: development_core_1.Operation.default,\n                pipes: [\n                        () => cache('templ'),\n                        () => plumber(),\n                        () => htmlMin({\n                        empty: true,\n                        spare: true,\n                        quotes: true\n                    }),\n                        (config) => ngHtml2Js({\n                        template: config.option.template ||\n                            `\r\nimport angular from 'angular';\r\nexport default angular.module('<%= moduleName %>', []).run(['$templateCache', function($templateCache) {\r\n    $templateCache.put('<%= template.url %>',  '<%= template.prettyEscapedContent %>');\r\n}]);\r\n`\n                    }),\n                    {\n                        oper: development_core_1.Operation.deploy | development_core_1.Operation.release,\n                        toTransform: () => sourcemaps.init(),\n                    },\n                    {\n                        oper: development_core_1.Operation.deploy | development_core_1.Operation.release,\n                        toTransform: (config) => babel(config.option.babelOption || { presets: ['es2015'] })\n                    },\n                    {\n                        oper: development_core_1.Operation.deploy | development_core_1.Operation.release,\n                        toTransform: (config) => ngAnnotate(config.option.ngAnnotate || { sourceMap: true, gulpWarnings: false })\n                    },\n                    {\n                        oper: development_core_1.Operation.deploy | development_core_1.Operation.release,\n                        toTransform: () => uglify()\n                    },\n                    {\n                        oper: development_core_1.Operation.deploy | development_core_1.Operation.release,\n                        toTransform: (config) => sourcemaps.write(config.option.sourceMaps || './sourcemaps')\n                    }\n                ]\n            },\n            {\n                name: 'templwatch',\n                oper: development_core_1.Operation.build,\n                watchTasks: ['templ']\n            }\n        ];\n    }\n};\nTemplTasks = __decorate([\n    development_core_1.dynamicTask, \n    __metadata('design:paramtypes', [])\n], TemplTasks);\nexports.TemplTasks = TemplTasks;\n","import { IDynamicTaskOption, IPipe, Operation, IDynamicTasks, dynamicTask } from 'development-core';\r\n// import * as chalk from 'chalk';\r\nimport * as path from 'path';\r\nconst cache = require('gulp-cached');\r\nconst sourcemaps = require('gulp-sourcemaps');\r\nconst uglify = require('gulp-uglify');\r\nconst babel = require('gulp-babel');\r\nconst plumber = require('gulp-plumber');\r\nconst htmlMin = require('gulp-minify-html');\r\nconst ngHtml2Js = require('gulp-ng-html2js');\r\nconst ngAnnotate = require('gulp-ng-annotate');\r\n\r\nexport interface ITemplTaskOption {\r\n    /**\r\n     * js template for html.\r\n     * \r\n     * @type {sring}\r\n     * @memberOf ITemplTaskOption\r\n     */\r\n    template: string;\r\n\r\n    /**\r\n     * babel 6 option.\r\n     * \r\n     * @type {*}\r\n     * @memberOf ITemplTaskOption\r\n     */\r\n    babelOption: any;\r\n\r\n    /**\r\n     * ngAnnotate option.\r\n     * \r\n     * @type {*}\r\n     * @memberOf ITemplTaskOption\r\n     */\r\n    ngAnnotate: any;\r\n\r\n    /**\r\n     * sourceMaps path.\r\n     * \r\n     * @type {string}\r\n     * @memberOf ITemplTaskOption\r\n     */\r\n    sourceMaps: string;\r\n}\r\n@dynamicTask\r\nexport class TemplTasks implements IDynamicTasks {\r\n\r\n    tasks(): IDynamicTaskOption[] {\r\n        return [\r\n            {\r\n                name: 'templ',\r\n                oper: Operation.default,\r\n                pipes: [\r\n                    () => cache('templ'),\r\n                    () => plumber(),\r\n                    () => htmlMin({\r\n                        empty: true,\r\n                        spare: true,\r\n                        quotes: true\r\n                    }),\r\n                    (config) => ngHtml2Js({\r\n                        template: (<ITemplTaskOption>config.option).template ||\r\n                        `\r\nimport angular from 'angular';\r\nexport default angular.module('<%= moduleName %>', []).run(['$templateCache', function($templateCache) {\r\n    $templateCache.put('<%= template.url %>',  '<%= template.prettyEscapedContent %>');\r\n}]);\r\n`\r\n                    }),\r\n\r\n                    <IPipe>{\r\n                        oper: Operation.deploy | Operation.release,\r\n                        toTransform: () => sourcemaps.init(),\r\n                    },\r\n                    <IPipe>{\r\n                        oper: Operation.deploy | Operation.release,\r\n                        toTransform: (config) => babel((<ITemplTaskOption>config.option).babelOption || { presets: ['es2015'] })\r\n                    },\r\n                    <IPipe>{\r\n                        oper: Operation.deploy | Operation.release,\r\n                        toTransform: (config) => ngAnnotate((<ITemplTaskOption>config.option).ngAnnotate || { sourceMap: true, gulpWarnings: false })\r\n                    },\r\n                    <IPipe>{\r\n                        oper: Operation.deploy | Operation.release,\r\n                        toTransform: () => uglify()\r\n                    },\r\n                    <IPipe>{\r\n                        oper: Operation.deploy | Operation.release,\r\n                        toTransform: (config) => sourcemaps.write((<ITemplTaskOption>config.option).sourceMaps ||  './sourcemaps')\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: 'templwatch',\r\n                oper: Operation.build,\r\n                watchTasks: ['templ']\r\n            }\r\n        ];\r\n    }\r\n}\r\n"]}