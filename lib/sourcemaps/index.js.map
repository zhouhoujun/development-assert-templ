{"version":3,"sources":["index.ts"],"names":["development_core_1","require","cache","sourcemaps","uglify","babel","plumber","htmlMin","ngHtml2Js","ngAnnotate","TemplTasks","prototype","tasks","name","oper","Operation","default","pipes","empty","spare","quotes","ctx","template","option","ngVersion","deploy","release","toTransform","init","babelOption","presets","sourceMap","gulpWarnings","write","sourceMaps","build","watchTasks","__decorate","dynamicTask","exports"],"mappings":"6aAAA,IAAAA,oBAAAC,QAAA,oBAGMC,MAAQD,QAAQ,eAChBE,WAAaF,QAAQ,mBACrBG,OAASH,QAAQ,eACjBI,MAAQJ,QAAQ,cAChBK,QAAUL,QAAQ,gBAClBM,QAAUN,QAAQ,oBAClBO,UAAYP,QAAQ,mBACpBQ,WAAaR,QAAQ,oBAoDdS,WAAU,WAAvB,QAAAA,MA4DA,MA1DIA,GAAAC,UAAAC,MAAA,WACI,QAEQC,KAAM,QACNC,KAAMd,mBAAAe,UAAUC,QAChBC,OACI,WAAM,MAAAf,OAAM,UACZ,WAAM,MAAAI,YACN,WAAM,MAAAC,UACFW,OAAO,EACPC,OAAO,EACPC,QAAQ,KAEZ,SAACC,GAAQ,MAAAb,YACLc,UAA6BD,EAAIE,OAAQD,UAAyD,IAA1BD,EAAIE,OAAQC,UAAvDH,mPAgB7BP,KAAMd,mBAAAe,UAAUU,OAASzB,mBAAAe,UAAUW,QACnCC,YAAa,WAAM,MAAAxB,YAAWyB,UAG9Bd,KAAMd,mBAAAe,UAAUU,OAASzB,mBAAAe,UAAUW,QACnCC,YAAa,SAACN,GAAQ,MAAAhB,OAAyBgB,EAAIE,OAAQM,cAAiBC,SAAU,eAGtFhB,KAAMd,mBAAAe,UAAUU,OAASzB,mBAAAe,UAAUW,QACnCC,YAAa,SAACN,GAAQ,MAAAZ,YAA8BY,EAAIE,OAAQd,aAAgBsB,WAAW,EAAMC,cAAc,OAG/GlB,KAAMd,mBAAAe,UAAUU,OAASzB,mBAAAe,UAAUW,QACnCC,YAAa,WAAM,MAAAvB,aAGnBU,KAAMd,mBAAAe,UAAUU,OAASzB,mBAAAe,UAAUW,QACnCC,YAAa,SAACN,GAAQ,MAAAlB,YAAW8B,MAAyBZ,EAAIE,OAAQW,YAAc,qBAK5FrB,KAAM,aACNC,KAAMd,mBAAAe,UAAUoB,MAChBC,YAAa,YAI7B1B,IA5DaA,YAAU2B,YADtBrC,mBAAAsC,aACY5B,YAAA6B,QAAA7B,WAAAA","file":"../index.js","sourcesContent":["import { IDynamicTaskOption, IPipe, IAsserts, Operation, IDynamicTasks, dynamicTask } from 'development-core';\r\n// import * as chalk from 'chalk';\r\nimport * as path from 'path';\r\nconst cache = require('gulp-cached');\r\nconst sourcemaps = require('gulp-sourcemaps');\r\nconst uglify = require('gulp-uglify');\r\nconst babel = require('gulp-babel');\r\nconst plumber = require('gulp-plumber');\r\nconst htmlMin = require('gulp-minify-html');\r\nconst ngHtml2Js = require('gulp-ng-html2js');\r\nconst ngAnnotate = require('gulp-ng-annotate');\r\n\r\n/**\r\n * templ assert task option.\r\n * \r\n * @export\r\n * @interface ITemplTaskOption\r\n * @extends {IAsserts}\r\n */\r\nexport interface ITemplTaskOption extends IAsserts {\r\n    /**\r\n     * custom html template.\r\n     * \r\n     * @type {sring}\r\n     * @memberOf ITemplTaskOption\r\n     */\r\n    template?: string;\r\n\r\n    /**\r\n     * default template for angular version. 1 or 2. default angular1 template\r\n     * \r\n     * @type {sring}\r\n     * @memberOf ITemplTaskOption\r\n     */\r\n    ngVersion?: number;\r\n\r\n    /**\r\n     * babel 6 option.\r\n     * \r\n     * @type {*}\r\n     * @memberOf ITemplTaskOption\r\n     */\r\n    babelOption: any;\r\n\r\n    /**\r\n     * ngAnnotate option.\r\n     * \r\n     * @type {*}\r\n     * @memberOf ITemplTaskOption\r\n     */\r\n    ngAnnotate: any;\r\n\r\n    /**\r\n     * sourceMaps path.\r\n     * \r\n     * @type {string}\r\n     * @memberOf ITemplTaskOption\r\n     */\r\n    sourceMaps: string;\r\n}\r\n\r\n@dynamicTask\r\nexport class TemplTasks implements IDynamicTasks {\r\n\r\n    tasks(): IDynamicTaskOption[] {\r\n        return [\r\n            {\r\n                name: 'templ',\r\n                oper: Operation.default,\r\n                pipes: [\r\n                    () => cache('templ'),\r\n                    () => plumber(),\r\n                    () => htmlMin({\r\n                        empty: true,\r\n                        spare: true,\r\n                        quotes: true\r\n                    }),\r\n                    (ctx) => ngHtml2Js({\r\n                        template: (<ITemplTaskOption>ctx.option).template || (<ITemplTaskOption>ctx.option).ngVersion === 2 ?\r\n                            `\r\nimport angular from 'angular';\r\nexport default angular.module('<%= moduleName %>', []).run(['$templateCache', function($templateCache) {\r\n    $templateCache.put('<%= template.url %>',  '<%= template.prettyEscapedContent %>');\r\n}]);\r\n`\r\n                            : `\r\nimport angular from 'angular';\r\nexport default angular.module('<%= moduleName %>', []).run(['$templateCache', function($templateCache) {\r\n    $templateCache.put('<%= template.url %>',  '<%= template.prettyEscapedContent %>');\r\n}]);\r\n`\r\n                    }),\r\n\r\n                    <IPipe>{\r\n                        oper: Operation.deploy | Operation.release,\r\n                        toTransform: () => sourcemaps.init(),\r\n                    },\r\n                    <IPipe>{\r\n                        oper: Operation.deploy | Operation.release,\r\n                        toTransform: (ctx) => babel((<ITemplTaskOption>ctx.option).babelOption || { presets: ['es2015'] })\r\n                    },\r\n                    <IPipe>{\r\n                        oper: Operation.deploy | Operation.release,\r\n                        toTransform: (ctx) => ngAnnotate((<ITemplTaskOption>ctx.option).ngAnnotate || { sourceMap: true, gulpWarnings: false })\r\n                    },\r\n                    <IPipe>{\r\n                        oper: Operation.deploy | Operation.release,\r\n                        toTransform: () => uglify()\r\n                    },\r\n                    <IPipe>{\r\n                        oper: Operation.deploy | Operation.release,\r\n                        toTransform: (ctx) => sourcemaps.write((<ITemplTaskOption>ctx.option).sourceMaps || './sourcemaps')\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: 'templwatch',\r\n                oper: Operation.build,\r\n                watchTasks: ['templ']\r\n            }\r\n        ];\r\n    }\r\n}\r\n"]}