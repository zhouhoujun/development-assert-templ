{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;;;;;;AAAA,qDAA8G;AAG9G,IAAM,KAAK,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACrC,IAAM,UAAU,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAC9C,IAAM,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACtC,IAAM,KAAK,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACpC,IAAM,OAAO,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AACxC,IAAM,OAAO,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;AAC5C,IAAM,SAAS,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAC7C,IAAM,UAAU,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;AAoD/C;IAAA;IA4DA,CAAC;IA1DG,0BAAK,GAAL;QACI,MAAM,CAAC;YACH;gBACI,IAAI,EAAE,OAAO;gBACb,IAAI,EAAE,4BAAS,CAAC,OAAO;gBACvB,KAAK,EAAE;oBACH,cAAM,OAAA,KAAK,CAAC,OAAO,CAAC,EAAd,CAAc;oBACpB,cAAM,OAAA,OAAO,EAAE,EAAT,CAAS;oBACf,cAAM,OAAA,OAAO,CAAC;wBACV,KAAK,EAAE,IAAI;wBACX,KAAK,EAAE,IAAI;wBACX,MAAM,EAAE,IAAI;qBACf,CAAC,EAJI,CAIJ;oBACF,UAAC,GAAG,IAAK,OAAA,SAAS,CAAC;wBACf,QAAQ,EAAqB,GAAG,CAAC,MAAO,CAAC,QAAQ,IAAuB,GAAG,CAAC,MAAO,CAAC,SAAS,KAAK,CAAC;4BAC/F,6OAK3B;8BAC6B,6OAK7B;qBACoB,CAAC,EAdO,CAcP;oBAEK;wBACH,IAAI,EAAE,4BAAS,CAAC,MAAM,GAAG,4BAAS,CAAC,OAAO;wBAC1C,WAAW,EAAE,cAAM,OAAA,UAAU,CAAC,IAAI,EAAE,EAAjB,CAAiB;qBACvC;oBACM;wBACH,IAAI,EAAE,4BAAS,CAAC,MAAM,GAAG,4BAAS,CAAC,OAAO;wBAC1C,WAAW,EAAE,UAAC,GAAG,IAAK,OAAA,KAAK,CAAoB,GAAG,CAAC,MAAO,CAAC,WAAW,IAAI,EAAE,OAAO,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,EAA5E,CAA4E;qBACrG;oBACM;wBACH,IAAI,EAAE,4BAAS,CAAC,MAAM,GAAG,4BAAS,CAAC,OAAO;wBAC1C,WAAW,EAAE,UAAC,GAAG,IAAK,OAAA,UAAU,CAAoB,GAAG,CAAC,MAAO,CAAC,UAAU,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC,EAAjG,CAAiG;qBAC1H;oBACM;wBACH,IAAI,EAAE,4BAAS,CAAC,MAAM,GAAG,4BAAS,CAAC,OAAO;wBAC1C,WAAW,EAAE,cAAM,OAAA,MAAM,EAAE,EAAR,CAAQ;qBAC9B;oBACM;wBACH,IAAI,EAAE,4BAAS,CAAC,MAAM,GAAG,4BAAS,CAAC,OAAO;wBAC1C,WAAW,EAAE,UAAC,GAAG,IAAK,OAAA,UAAU,CAAC,KAAK,CAAoB,GAAG,CAAC,MAAO,CAAC,UAAU,IAAI,cAAc,CAAC,EAA7E,CAA6E;qBACtG;iBACJ;aACJ;YACD;gBACI,IAAI,EAAE,YAAY;gBAClB,IAAI,EAAE,4BAAS,CAAC,KAAK;gBACrB,UAAU,EAAE,CAAC,OAAO,CAAC;aACxB;SACJ,CAAC;IACN,CAAC;IA3DQ,UAAU;QADtB,8BAAW;OACC,UAAU,CA4DtB;IAAD,iBAAC;CA5DD,AA4DC,IAAA;AA5DY,gCAAU","file":"../index.js","sourcesContent":["import { IDynamicTaskOption, IPipe, IAsserts, Operation, IDynamicTasks, dynamicTask } from 'development-core';\r\n// import * as chalk from 'chalk';\r\nimport * as path from 'path';\r\nconst cache = require('gulp-cached');\r\nconst sourcemaps = require('gulp-sourcemaps');\r\nconst uglify = require('gulp-uglify');\r\nconst babel = require('gulp-babel');\r\nconst plumber = require('gulp-plumber');\r\nconst htmlMin = require('gulp-minify-html');\r\nconst ngHtml2Js = require('gulp-ng-html2js');\r\nconst ngAnnotate = require('gulp-ng-annotate');\r\n\r\n/**\r\n * templ assert task option.\r\n * \r\n * @export\r\n * @interface ITemplTaskOption\r\n * @extends {IAsserts}\r\n */\r\nexport interface ITemplTaskOption extends IAsserts {\r\n    /**\r\n     * custom html template.\r\n     * \r\n     * @type {sring}\r\n     * @memberOf ITemplTaskOption\r\n     */\r\n    template?: string;\r\n\r\n    /**\r\n     * default template for angular version. 1 or 2. default angular1 template\r\n     * \r\n     * @type {sring}\r\n     * @memberOf ITemplTaskOption\r\n     */\r\n    ngVersion?: number;\r\n\r\n    /**\r\n     * babel 6 option.\r\n     * \r\n     * @type {*}\r\n     * @memberOf ITemplTaskOption\r\n     */\r\n    babelOption: any;\r\n\r\n    /**\r\n     * ngAnnotate option.\r\n     * \r\n     * @type {*}\r\n     * @memberOf ITemplTaskOption\r\n     */\r\n    ngAnnotate: any;\r\n\r\n    /**\r\n     * sourceMaps path.\r\n     * \r\n     * @type {string}\r\n     * @memberOf ITemplTaskOption\r\n     */\r\n    sourceMaps: string;\r\n}\r\n\r\n@dynamicTask\r\nexport class TemplTasks implements IDynamicTasks {\r\n\r\n    tasks(): IDynamicTaskOption[] {\r\n        return [\r\n            {\r\n                name: 'templ',\r\n                oper: Operation.default,\r\n                pipes: [\r\n                    () => cache('templ'),\r\n                    () => plumber(),\r\n                    () => htmlMin({\r\n                        empty: true,\r\n                        spare: true,\r\n                        quotes: true\r\n                    }),\r\n                    (ctx) => ngHtml2Js({\r\n                        template: (<ITemplTaskOption>ctx.option).template || (<ITemplTaskOption>ctx.option).ngVersion === 2 ?\r\n                            `\r\nimport angular from 'angular';\r\nexport default angular.module('<%= moduleName %>', []).run(['$templateCache', function($templateCache) {\r\n    $templateCache.put('<%= template.url %>',  '<%= template.prettyEscapedContent %>');\r\n}]);\r\n`\r\n                            : `\r\nimport angular from 'angular';\r\nexport default angular.module('<%= moduleName %>', []).run(['$templateCache', function($templateCache) {\r\n    $templateCache.put('<%= template.url %>',  '<%= template.prettyEscapedContent %>');\r\n}]);\r\n`\r\n                    }),\r\n\r\n                    <IPipe>{\r\n                        oper: Operation.deploy | Operation.release,\r\n                        toTransform: () => sourcemaps.init(),\r\n                    },\r\n                    <IPipe>{\r\n                        oper: Operation.deploy | Operation.release,\r\n                        toTransform: (ctx) => babel((<ITemplTaskOption>ctx.option).babelOption || { presets: ['es2015'] })\r\n                    },\r\n                    <IPipe>{\r\n                        oper: Operation.deploy | Operation.release,\r\n                        toTransform: (ctx) => ngAnnotate((<ITemplTaskOption>ctx.option).ngAnnotate || { sourceMap: true, gulpWarnings: false })\r\n                    },\r\n                    <IPipe>{\r\n                        oper: Operation.deploy | Operation.release,\r\n                        toTransform: () => uglify()\r\n                    },\r\n                    <IPipe>{\r\n                        oper: Operation.deploy | Operation.release,\r\n                        toTransform: (ctx) => sourcemaps.write((<ITemplTaskOption>ctx.option).sourceMaps || './sourcemaps')\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: 'templwatch',\r\n                oper: Operation.build,\r\n                watchTasks: ['templ']\r\n            }\r\n        ];\r\n    }\r\n}\r\n"]}